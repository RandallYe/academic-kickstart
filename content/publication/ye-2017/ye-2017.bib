@article{Ye2017,
 __markedentry = {[ykf_2001:6]},
 abstract = {Since state-rich formalism  is a combination of Z, CSP, refinement calculus and Dijkstra’s guarded commands, its model checking is intrinsically more complicated and difficult than that of individual state-based languages or process algebras. Current solutions translate executable constructs of  programs to Java with JCSP, or translate them to CSP processes. Data aspects of  programs are expressed in the Java programming language or as CSP processes. Both of them have disadvantages. This work presents a new approach to model-checking  by linking it to $$CSP ∥ B$$CSP‖B; then we utilise ProB to model-check and animate the $$CSP ∥ B$$CSP‖B program. The most significant advantage of this approach is the direct mapping of the state part in  to Z and finally to B, which maintains the high-level abstraction of data specification. In addition, introduction of deadlock, invariant violation checking, LTL formula checking and animation is another key advantage. We present our approach, a link definition for a subset of  constructs, as well as a popular case study (reactive buffer) to show the practical usability of our work. We conclude with a discussion of related work, advantages and potential limitations of our approach and future work.},
 author = {Ye, Kangfeng and Woodcock, Jim},
 date = {2017-02-01},
 doi = {10.1007/s10009-015-0402-1},
 journal = {International Journal on Software Tools for Technology Transfer},
 month = {February},
 number = {1},
 owner = {ykf_2001},
 pages = {73},
 publisher = {Springer},
 timestamp = {2019.07.29},
 title = {Model checking of state-rich formalism by linking to $$CSP\,‖ \,B$$CSP‖B},
 url = {http://dx.doi.org/10.1007/s10009-015-0402-1},
 volume = {19},
 year = {2017}
}

